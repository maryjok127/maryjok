{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).cart.jsx", "../../../../app/components/ProductsCorousel.jsx"],
  "sourcesContent": ["import {Await, useMatches, useLoaderData} from '@remix-run/react';\nimport {defer, redirect} from '@shopify/remix-oxygen';\nimport {Suspense} from 'react';\nimport {CartForm} from '@shopify/hydrogen';\nimport {json} from '@shopify/remix-oxygen';\nimport {CartMain} from '~/components/Cart';\nimport ProductsCorousel from '~/components/ProductsCorousel';\n\nexport const meta = () => {\n  return [{title: `Hydrogen | Cart`}];\n};\n\nexport async function loader({params, request, context}) {\n  const {handle} = params;\n  const {storefront} = context;\n  const {collections} = await storefront.query(FEATURED_COLLECTION_QUERY);\n  const recommendedProducts = collections;\n  return defer({recommendedProducts});\n}\nexport async function action({request, context}) {\n  const {session, cart} = context;\n\n  const [formData, customerAccessToken] = await Promise.all([\n    request.formData(),\n    session.get('customerAccessToken'),\n  ]);\n\n  const {action, inputs} = CartForm.getFormInput(formData);\n\n  if (!action) {\n    throw new Error('No action provided');\n  }\n\n  let status = 200;\n  let result;\n\n  switch (action) {\n    case CartForm.ACTIONS.LinesAdd:\n      result = await cart.addLines(inputs.lines);\n      break;\n    case CartForm.ACTIONS.LinesUpdate:\n      result = await cart.updateLines(inputs.lines);\n      break;\n    case CartForm.ACTIONS.LinesRemove:\n      result = await cart.removeLines(inputs.lineIds);\n      break;\n    case CartForm.ACTIONS.DiscountCodesUpdate: {\n      const formDiscountCode = inputs.discountCode;\n      // User inputted discount code\n      const discountCodes = formDiscountCode ? [formDiscountCode] : [];\n      // Combine discount codes already applied on cart\n      discountCodes.push(...inputs.discountCodes);\n      result = await cart.updateDiscountCodes(discountCodes);\n      break;\n    }\n    case CartForm.ACTIONS.BuyerIdentityUpdate: {\n      result = await cart.updateBuyerIdentity({\n        ...inputs.buyerIdentity,\n        customerAccessToken,\n      });\n      break;\n    }\n    default:\n      throw new Error(`${action} cart action is not defined`);\n  }\n\n  const cartId = result.cart.id;\n  const headers = cart.setCartId(result.cart.id);\n  const {cart: cartResult, errors} = result;\n\n  const redirectTo = formData.get('redirectTo') ?? null;\n  if (typeof redirectTo === 'string') {\n    status = 303;\n    headers.set('Location', redirectTo);\n  }\n\n  return json(\n    {\n      cart: cartResult,\n      errors,\n      analytics: {\n        cartId,\n      },\n    },\n    {status, headers},\n  );\n}\n\nexport default function Cart() {\n  const {recommendedProducts} = useLoaderData();\n  const [root] = useMatches();\n  const cart = root.data?.cart;\n  console.log(\"hydrogen cart ::\", cart.lines)\n\n  return (\n    <div className=\"cart px-4\">\n      <h1>Cart</h1>\n      <Suspense fallback={<p>Loading cart ...</p>}>\n        <Await errorElement={<div>An error occurred</div>} resolve={cart}>\n          {(cart) => {\n            return <CartMain layout=\"page\" cart={cart} />;\n          }}\n        </Await>\n        <RecommendedProducts\n        key={recommendedProducts.nodes[0].id}\n        products={recommendedProducts.nodes[0].products}\n        title=\"Recommended Products\"\n      />\n      </Suspense>\n    </div>\n  );\n}\n\nfunction RecommendedProducts({products, title}) {\n  return (\n    <>\n      <h1 className=\"text-center font-semibold my-[15px]\">{title} </h1>\n      <div>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Await resolve={products}>\n            {/*<ShopifyCarousel products={products}></ShopifyCarousel>*/}\n            {<ProductsCorousel products={products}></ProductsCorousel>}\n          </Await>\n        </Suspense>\n        <br />\n      </div>\n    </>\n  );\n}\n\nconst FEATURED_COLLECTION_QUERY = `#graphql\n  fragment FeaturedCollection on Collection {\n    products(first:100){\n      edges{\n        node{\n          id\n          title\n          handle\n          priceRange {\n            minVariantPrice {\n              amount\n              currencyCode\n            }\n          }\n          variants(first: 100) {\n          edges {\n          node {\n                id\n                metafields(identifiers: [{namespace: \"custom\", key: \"isdefault\"} ]){\n                    key\n                    value\n                  }\n                }\n              }\n        }\n        images(first:1){\n          edges{\n            node{\n              url\n            }\n          }\n        }\n        }\n      }\n    }\n    id\n    title\n    metafields(identifiers: [{namespace: \"custom\", key: \"from_customer_inbox\"}, {namespace: \"custom\", key: \"1_custom_colllection\"}]){\n      id\n      key\n      namespace\n      value\n    }\n    image {\n      id\n      url\n      altText\n      width\n      height\n    }\n    handle\n  }\n  query FeaturedCollection($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    collections(first: 100) {\n      nodes {\n        ...FeaturedCollection\n      }\n    }\n  }\n`\nconst RECOMMENDED_PRODUCTS_QUERY = `#graphql\n  fragment RecommendedProduct on Product {\n    id\n    title\n    handle\n    priceRange {\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    metafields(identifiers: [{namespace: \"custom\", key: \"customized\"}, {namespace: \"custom\", key: \"reviewed_products\"}]){\n      key\n      value\n    }\n    variants(first: 100) {\n      edges {\n        node {\n          id\n          metafields(identifiers: [{namespace: \"custom\", key: \"isdefault\"} ]){\n              key\n              value\n            }\n          # Add other variant fields you need\n        }\n      }\n    }\n    priceRange {\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    images(first: 10) {\n      nodes {\n        id\n        url\n        altText\n        width\n        height\n      }\n    }\n  }\n  query RecommendedProducts ($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    products(first: 10, sortKey: UPDATED_AT, reverse: true) {\n      nodes {\n        ...RecommendedProduct\n      }\n    }\n  }\n`;\n/*\nfunction JsonToHtml({ json }) {\n  const renderChildren = (children) => {\n    return children.map((child, index) => {\n      if (child.type === 'paragraph') {\n        // If the type is 'paragraph', create a <p> element\n        return <p key={index}>{child.children[0].value}</p>;\n      } else if (child.type === 'list') {\n        // Handle list elements as needed (e.g., ul, ol)\n        // You can add logic to create list elements here\n        return null;\n      } else {\n        // Handle other types or unknown types\n        return null;\n      }\n    });\n  };\n\n  return (\n    <div>\n      {renderChildren(json.children)}\n    </div>\n  );\n};\n*/\n\n", "import {useState} from 'react';\nimport {useMediaQuery} from 'react-responsive';\nimport {\n  CartForm,\n} from '@shopify/hydrogen';\n//import products from './products';\n\nconst ProductsCorousel = ({products}) => {\n  const noImg = \"https://cdn.shopify.com/s/files/1/0809/4253/0882/files/No-image-found.jpg?v=1708942129\"\n  let productsToShow = [];\n  const [startIndex, setStartIndex] = useState(0);\n  //const [endIndex, setEndIndex]  = useState();\n  const lines = [];\n  const isLargeScreen = useMediaQuery({minWidth: 1024});\n  const endIndex = isLargeScreen ? 4 : 2;\n \n  if (products != null || products != undefined) {\n    productsToShow = products.edges.slice(startIndex, startIndex + endIndex);\n    //console.log(productsToShow);\n  }\n\n  const goToProduct=(url_path)=>{\n    window.location.href = url_path\n  }\n\n  products.edges.map((product) => {\n    product.node.variants.edges.map((line) => {\n      if(line.node.availableForSale){\n      lines.push([\n        {\n          merchandiseId: line.node.id,\n          quantity: 1,\n        },\n      ]);\n      }\n    });\n  });\n\n  return (\n    <div className=\"w-full max-w-screen-xl mx-auto lg:px-24 sm:px-4 md:px-6 py-6\">\n      <div className=\"relative\">\n        <div className=\"flex mobile-productView p-[10px] gap-4\">\n          {productsToShow.map((product,index) => (\n            <div key={product.node.id}\n              className=\"w-full sm:w-1/3 md:w-1/3 lg:px-4 sm:px-1 md:px-3\"\n            >\n              <div className=\"mst-card bg-white rounded-lg shadow-lg p-1 sm:p-2 shadow-md\">\n                <div className='cursor' onClick={()=> goToProduct(`/products/${product.node.handle}`)}>\n                  <img\n                    src={`${ product.node.images.edges.length > 0 ? product.node.images.edges[0].node.url : noImg }`} // Make sure to put your images in the 'public/images/' directory\n                    alt={product.node.title}\n                    className=\"w-full h-auto\"\n                  />\n                  <div className='product_info'>\n                    <h2 className=\"text-lg font-semibold mt-2 text-center min-h-[85px] sm:min-h-[50px]\">\n                      {product.node.title}\n                    </h2>\n                    <div>\n                      <h1 className=\"text-center font-bold h-full w-full m-auto\">\n                      &#x20b9; {Math.trunc(product.node.priceRange.minVariantPrice.amount)} \n                      </h1>\n                    </div>\n                  </div>\n                </div>\n                {/* Add more product information here */}\n                <div className=\"px-1 py-1 flex items-center sm:flex-row gap-3 justify-center w-[100%]\">\n                  <div className=\"w-[25%] flex justify-center\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 32 33\"\n                      xmlSpace=\"preserve\"\n                      className=\"sm:w-[43px] w-[43px] like-home\"\n                    >\n                      <path\n                        d=\"M9 .5h14c4.7 0 8.5 3.8 8.5 8.5v14c0 4.7-3.8 8.5-8.5 8.5H9C4.3 31.5.5 27.7.5 23V9C.5 4.3 4.3.5 9 .5z\"\n                        fill=\"rgb(255, 255, 255)\"\n                        stroke=\"rgb(0, 0, 0)\"\n                      ></path>\n                      <path\n                        d=\"M22.3 11.8c.4.4.7.9.9 1.4.2.5.3 1.1.3 1.6 0 .6-.1 1.1-.3 1.6-.2.5-.5 1-.9 1.4l-5.6 5.6s-.1 0-.1.1h-.2s-.1 0-.1-.1l-5.6-5.6C10 17 9.5 16 9.5 14.9c0-1.1.3-2.1 1-2.9.7-.8 1.7-1.3 2.7-1.5 1.1-.1 2.1.2 3 .8l.3.2.3-.2c.8-.6 1.8-.9 2.8-.8 1.1.1 2 .5 2.7 1.3z\"\n                        fill=\"none\"\n                        stroke=\"rgb(0, 0, 0)\"\n                      ></path>\n                    </svg>\n                  </div>\n              \n                  <div d-line={index} className=\"w-[75%]\">\n                    <CartForm\n                      route=\"/cart\"\n                      inputs={{lines: lines[index]}}\n                      action={CartForm.ACTIONS.LinesAdd}\n                      className=\"w-[83%] \"\n                    >\n                      {(fetcher) => (\n                        <>\n                          <button\n                          disabled={!product.node.variants || !product.node.variants.edges[0].node.availableForSale}\n                            className=\"w-[100%] h-11 bg-black hover:bg-blue-700 text-white font-bold py-1 rounded-lg inline-block home-product\"\n                            type=\"submit\"\n                            onClick={() => {\n                              window.location.href =\n                                window.location.href + '#cart-aside';\n                            }}\n                          >\n                           { product.node.variants && product.node.variants.edges[0].node.availableForSale ? 'ADD TO CART' : 'Sold out'}\n                          </button>\n                        </>\n                      )}\n                    </CartForm>\n                  </div>\n                </div>\n                </div>\n            </div>\n          ))}\n        </div>\n        {/* <button\n          className=\"absolute left-0 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-50 rounded-full p-2 ml-4 hover:bg-opacity-75\"\n          onClick={() =>\n            setStartIndex((prevIndex) =>\n              prevIndex === 0\n                ? products.edges.length - (products.edges.length % 2)\n                : prevIndex,\n            )\n          }\n        >\n        <MdChevronLeft\n          className=\"opacity-50 cursor-pointer hover:opacity-100\"\n          size={40}\n        />\n        </button>\n        <button\n          className=\"absolute right-0 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-50 rounded-full p-2 mr-4 hover:bg-opacity-75\"\n          onClick={() =>\n            setStartIndex(\n              (prevIndex) => (prevIndex + 1) % products.edges.length,\n            )\n          }\n        >\n        <MdChevronRight\n          className=\"opacity-50 cursor-pointer hover:opacity-100\"\n          size={40}\n        /> \n        </button>\n        */}\n      </div>\n    </div>\n  );\n};\n\nexport default ProductsCorousel;\n"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "cart"]
}
