{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).cart.jsx"],
  "sourcesContent": ["import {Await, useMatches, useLoaderData} from '@remix-run/react';\nimport {defer, redirect} from '@shopify/remix-oxygen';\nimport {Suspense} from 'react';\nimport {CartForm} from '@shopify/hydrogen';\nimport {json} from '@shopify/remix-oxygen';\nimport {CartMain} from '~/components/Cart';\nimport ProductsCorousel from '~/components/ProductsCorousel';\n\nexport const meta = () => {\n  return [{title: `Hydrogen | Cart`}];\n};\n\nexport async function loader({params, request, context}) {\n  const {handle} = params;\n  const {storefront} = context;\n  const {collections} = await storefront.query(FEATURED_COLLECTION_QUERY);\n  const recommendedProducts = collections;\n  return defer({recommendedProducts});\n}\nexport async function action({request, context}) {\n  const {session, cart} = context;\n\n  const [formData, customerAccessToken] = await Promise.all([\n    request.formData(),\n    session.get('customerAccessToken'),\n  ]);\n\n  const {action, inputs} = CartForm.getFormInput(formData);\n\n  if (!action) {\n    throw new Error('No action provided');\n  }\n\n  let status = 200;\n  let result;\n\n  switch (action) {\n    case CartForm.ACTIONS.LinesAdd:\n      result = await cart.addLines(inputs.lines);\n      break;\n    case CartForm.ACTIONS.LinesUpdate:\n      result = await cart.updateLines(inputs.lines);\n      break;\n    case CartForm.ACTIONS.LinesRemove:\n      result = await cart.removeLines(inputs.lineIds);\n      break;\n    case CartForm.ACTIONS.DiscountCodesUpdate: {\n      const formDiscountCode = inputs.discountCode;\n      // User inputted discount code\n      const discountCodes = formDiscountCode ? [formDiscountCode] : [];\n      // Combine discount codes already applied on cart\n      discountCodes.push(...inputs.discountCodes);\n      result = await cart.updateDiscountCodes(discountCodes);\n      break;\n    }\n    case CartForm.ACTIONS.BuyerIdentityUpdate: {\n      result = await cart.updateBuyerIdentity({\n        ...inputs.buyerIdentity,\n        customerAccessToken,\n      });\n      break;\n    }\n    default:\n      throw new Error(`${action} cart action is not defined`);\n  }\n\n  const cartId = result.cart.id;\n  const headers = cart.setCartId(result.cart.id);\n  const {cart: cartResult, errors} = result;\n\n  const redirectTo = formData.get('redirectTo') ?? null;\n  if (typeof redirectTo === 'string') {\n    status = 303;\n    headers.set('Location', redirectTo);\n  }\n\n  return json(\n    {\n      cart: cartResult,\n      errors,\n      analytics: {\n        cartId,\n      },\n    },\n    {status, headers},\n  );\n}\n\nexport default function Cart() {\n  const {recommendedProducts} = useLoaderData();\n  const [root] = useMatches();\n  const cart = root.data?.cart;\n  console.log(\"hydrogen cart ::\", cart.lines)\n\n  return (\n    <div className=\"cart px-4\">\n      <h1>Cart</h1>\n      <Suspense fallback={<p>Loading cart ...</p>}>\n        <Await errorElement={<div>An error occurred</div>} resolve={cart}>\n          {(cart) => {\n            return <CartMain layout=\"page\" cart={cart} />;\n          }}\n        </Await>\n        <RecommendedProducts\n        key={recommendedProducts.nodes[0].id}\n        products={recommendedProducts.nodes[0].products}\n        title=\"Recommended Products\"\n      />\n      </Suspense>\n    </div>\n  );\n}\n\nfunction RecommendedProducts({products, title}) {\n  return (\n    <>\n      <h1 className=\"text-center font-semibold my-[15px]\">{title} </h1>\n      <div>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Await resolve={products}>\n            {/*<ShopifyCarousel products={products}></ShopifyCarousel>*/}\n            {<ProductsCorousel products={products}></ProductsCorousel>}\n          </Await>\n        </Suspense>\n        <br />\n      </div>\n    </>\n  );\n}\n\nconst FEATURED_COLLECTION_QUERY = `#graphql\n  fragment FeaturedCollection on Collection {\n    products(first:100){\n      edges{\n        node{\n          id\n          title\n          handle\n          priceRange {\n            minVariantPrice {\n              amount\n              currencyCode\n            }\n          }\n          variants(first: 100) {\n          edges {\n          node {\n                id\n                metafields(identifiers: [{namespace: \"custom\", key: \"isdefault\"} ]){\n                    key\n                    value\n                  }\n                }\n              }\n        }\n        images(first:1){\n          edges{\n            node{\n              url\n            }\n          }\n        }\n        }\n      }\n    }\n    id\n    title\n    metafields(identifiers: [{namespace: \"custom\", key: \"from_customer_inbox\"}, {namespace: \"custom\", key: \"1_custom_colllection\"}]){\n      id\n      key\n      namespace\n      value\n    }\n    image {\n      id\n      url\n      altText\n      width\n      height\n    }\n    handle\n  }\n  query FeaturedCollection($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    collections(first: 100) {\n      nodes {\n        ...FeaturedCollection\n      }\n    }\n  }\n`\nconst RECOMMENDED_PRODUCTS_QUERY = `#graphql\n  fragment RecommendedProduct on Product {\n    id\n    title\n    handle\n    priceRange {\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    metafields(identifiers: [{namespace: \"custom\", key: \"customized\"}, {namespace: \"custom\", key: \"reviewed_products\"}]){\n      key\n      value\n    }\n    variants(first: 100) {\n      edges {\n        node {\n          id\n          metafields(identifiers: [{namespace: \"custom\", key: \"isdefault\"} ]){\n              key\n              value\n            }\n          # Add other variant fields you need\n        }\n      }\n    }\n    priceRange {\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    images(first: 10) {\n      nodes {\n        id\n        url\n        altText\n        width\n        height\n      }\n    }\n  }\n  query RecommendedProducts ($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    products(first: 10, sortKey: UPDATED_AT, reverse: true) {\n      nodes {\n        ...RecommendedProduct\n      }\n    }\n  }\n`;\n/*\nfunction JsonToHtml({ json }) {\n  const renderChildren = (children) => {\n    return children.map((child, index) => {\n      if (child.type === 'paragraph') {\n        // If the type is 'paragraph', create a <p> element\n        return <p key={index}>{child.children[0].value}</p>;\n      } else if (child.type === 'list') {\n        // Handle list elements as needed (e.g., ul, ol)\n        // You can add logic to create list elements here\n        return null;\n      } else {\n        // Handle other types or unknown types\n        return null;\n      }\n    });\n  };\n\n  return (\n    <div>\n      {renderChildren(json.children)}\n    </div>\n  );\n};\n*/\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAEA,IAAAA,gBAAuB;AA8FjB;AAxFC,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC,EAAC,OAAO,kBAAiB,CAAC;AACpC;AA8Ee,SAAR,OAAwB;AAC7B,QAAM,EAAC,oBAAmB,IAAI,cAAc;AAC5C,QAAM,CAAC,IAAI,IAAI,WAAW;AAC1B,QAAM,OAAO,KAAK,MAAM;AACxB,UAAQ,IAAI,oBAAoB,KAAK,KAAK;AAE1C,SACE,mDAAC,SAAI,WAAU,aACb;AAAA,uDAAC,QAAG,oBAAJ;AAAA;AAAA;AAAA;AAAA,WAAQ;AAAA,IACR,mDAAC,0BAAS,UAAU,mDAAC,OAAE,gCAAH;AAAA;AAAA;AAAA;AAAA,WAAmB,GACrC;AAAA,yDAAC,SAAM,cAAc,mDAAC,SAAI,iCAAL;AAAA;AAAA;AAAA;AAAA,aAAsB,GAAQ,SAAS,MACzD,WAACC,UAAS;AACT,eAAO,mDAAC,YAAS,QAAO,QAAO,MAAMA,SAA9B;AAAA;AAAA;AAAA;AAAA,eAAoC;AAAA,MAC7C,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA;AAAA,QAAC;AAAA;AAAA,UAED,UAAU,oBAAoB,MAAM,CAAC,EAAE;AAAA,UACvC,OAAM;AAAA;AAAA,QAFD,oBAAoB,MAAM,CAAC,EAAE;AAAA,QADlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIF;AAAA,SAVA;AAAA;AAAA;AAAA;AAAA,WAWA;AAAA,OAbF;AAAA;AAAA;AAAA;AAAA,SAcA;AAEJ;AAEA,SAAS,oBAAoB,EAAC,UAAU,MAAK,GAAG;AAC9C,SACE,sFACE;AAAA,uDAAC,QAAG,WAAU,uCAAuC;AAAA;AAAA,MAAM;AAAA,SAA3D;AAAA;AAAA;AAAA;AAAA,WAA4D;AAAA,IAC5D,mDAAC,SACC;AAAA,yDAAC,0BAAS,UAAU,mDAAC,SAAI,0BAAL;AAAA;AAAA;AAAA;AAAA,aAAe,GACjC,6DAAC,SAAM,SAAS,UAEb,6DAAC,4BAAiB,YAAlB;AAAA;AAAA;AAAA;AAAA,aAAsC,KAFzC;AAAA;AAAA;AAAA;AAAA,aAGA,KAJF;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,SAPN;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,OAVF;AAAA;AAAA;AAAA;AAAA,SAWA;AAEJ;",
  "names": ["import_react", "cart"]
}
